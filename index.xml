<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ПЕЧЕНЫЙ</title>
    <link>https://pecheny.me/</link>
    <description>Recent content on ПЕЧЕНЫЙ</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Sep 2016 10:00:00 +0300</lastBuildDate>
    <atom:link href="https://pecheny.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Том Йорк</title>
      <link>https://pecheny.me/dreams/thomyorke/</link>
      <pubDate>Fri, 16 Sep 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/thomyorke/</guid>
      <description>&lt;p&gt;Вскоре после нового альбома Радиохед Йорк выпустил сольник. Я всё ещё работаю в школе, дал ученикам контрольную, а сам сел слушать. По стилистике похоже на &lt;span class=&#34;scaps&#34;&gt;AMSP&lt;/span&gt;, но всё под одну гитару. Удивило, что одна песня — с русским названием, даже записано кириллическими буквами — и про дотку. Сам Йорк поёт на русском без акцента. Всё это подозрительно, но качество записи не похоже на пародию, и голос Йорка неотличим от настоящего. Стал гуглить — на всех сайтах указан тот же треклист, с русской песней.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Учитель</title>
      <link>https://pecheny.me/dreams/teacher/</link>
      <pubDate>Mon, 12 Sep 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/teacher/</guid>
      <description>&lt;p&gt;Я работаю учителем в школе. Вместе с коллегами пошёл играть городское ориентирование. Один из &lt;span class=&#34;scaps&#34;&gt;КП&lt;/span&gt; — в спальном районе между гаражами. Пришли туда. На гаражах граффити — портреты в полный рост меня, коллег и других учителей нашей школы. Вдруг граффити начали двигаться и поворачиваться к нам. Я испугался и проснулся.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Alfred Workflow</title>
      <link>https://pecheny.me/blog/kpcli-pexpect/</link>
      <pubDate>Thu, 25 Aug 2016 13:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/blog/kpcli-pexpect/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Some days ago I laid my hands on &lt;a href=&#34;//www.alfredapp.com&#34;&gt;Alfred&lt;/a&gt;. It is a beautiful piece of software, albeit I find its features (especially those related to workflows) rather limited. Maybe it is due to lack of knowledge. Anyway, I decided to play around with workflows and come up with something useful. It didn’t take long to find a goal.&lt;/p&gt;

&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Alfred is known for its &lt;a href=&#34;//1password.com&#34;&gt;1Password&lt;/a&gt; integration. Unfortunately, that is the only password management solution supported, while I, since my Windows and Linux days, have used &lt;a href=&#34;//http://keepass.info/&#34;&gt;KeePass&lt;/a&gt; and, having transitioned to &lt;span class=&#34;scaps&#34;&gt;OS X&lt;/span&gt;, continue to use it in the form of &lt;a href=&#34;//github.com/mstarke/MacPass&#34;&gt;MacPass&lt;/a&gt; and have no reason to abandon it for a proprietary solution.&lt;/p&gt;

&lt;p&gt;Naturally I decided that it would be great to create a workflow implementing &lt;strong&gt;KeePass integration&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;the-details&#34;&gt;The Details&lt;/h1&gt;

&lt;p&gt;MacPass doesn’t provide any &lt;span class=&#34;scaps&#34;&gt;CLI API&lt;/span&gt;, so I turned to external libraries. The situation was further complicated by the fact that I use KeePass v4 format (kdbx) that is supported way less widely. At the moment of writing there is &lt;a href=&#34;https://github.com/phpwutz/libkeepass&#34;&gt;only one Python library&lt;/a&gt; claiming to support kdbx; it hasn’t been updated in two years and looks rather unpolished, so I continued my search and finally found &lt;a href=&#34;//sourceforge.net/projects/kpcli/&#34;&gt;kpcli&lt;/a&gt;, an active project written in Perl.&lt;/p&gt;

&lt;p&gt;The obvious downside of it is being written in Perl, which I’m unfamiliar with. &lt;a href=&#34;//www.australsounds.com/2014/10/installingkpcli.html&#34;&gt;This article&lt;/a&gt; was somewhat helpful, but didn’t list all of the required packages, so for your convenience I list them all here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo cpan Capture::Tiny
sudo cpan Clipboard
sudo cpan Clone
sudo cpan Crypt::Rijndael
sudo cpan File::KeePass
sudo cpan Sort::Naturally
sudo cpan Term::ReadLine::Gnu
sudo cpan Term::ShellUI
sudo cpan XML::Parser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to test kpcli manually, but encountered a problem that is more fully described in &lt;a href=&#34;https://sourceforge.net/p/kpcli/bugs/16/&#34;&gt;a bug&lt;/a&gt; filed against kpcli. The gist of it is that &lt;code&gt;File::KeePass&lt;/code&gt; does not deal well with &lt;span class=&#34;scaps&#34;&gt;XML&lt;/span&gt;-based KeePass keyfiles. The solution was to create a temporary file containing decoded binary data from the &lt;span class=&#34;scaps&#34;&gt;XML&lt;/span&gt; keyfile.&lt;/p&gt;

&lt;p&gt;Yet another problem was that kpcli is fully interactive and does not expose any &lt;span class=&#34;scaps&#34;&gt;API&lt;/span&gt;, so I had to emulate user input. That’s where &lt;a href=&#34;//pexpect.readthedocs.io/en/stable/&#34;&gt;pexpect&lt;/a&gt; came in handy.&lt;/p&gt;

&lt;h1 id=&#34;the-solution&#34;&gt;The Solution&lt;/h1&gt;

&lt;p&gt;Long story short, I was able to compile a workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//i.imgur.com/hL8wqwW.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;See it in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//i.imgur.com/PQdTXe4.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(The screencast is from an earlier version, that’s why it is mp/macpass instead of kp/keepass. Also here the password is pasted — this behaviour was later ditched for autotype to achieve better security. I was too lazy to shoot another take.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The workflow accepts a keyword with the desired KeePass entry as argument. The argument is then passed to the python script, which interacts with kpcli and prints out the password. The password is then passed to an applescript which autotypes it into the foremost app.&lt;/p&gt;

&lt;p&gt;I’ll present the script here in full in order to expose all my Python greatness (lul). Also you will need to make adjustments in order for it to actually work, so you better read the source. Voilà!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__future__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;unicode_literals&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__future__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;division&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__future__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;print_function&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argparse&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pexpect&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bs4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BeautifulSoup&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_pass&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(before):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Kpcli `show` function outputs all fields, not only password.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    We need to extract the password from its output.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    The password is printed in red letters over red background&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    so as only to be seen when selected -- we must remove coloring&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    commands surrounding the password.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;spl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;decode(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[x&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;spl]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(c):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c[i]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c[i][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Pass:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c[i][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:][:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# remove coloring commands surrounding&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_real_key&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(keyfile):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Kdbx key is an xml file. The key itself is base64-encoded binary&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    data stored inside an aptly named &amp;lt;data&amp;gt; tag.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;soup&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BeautifulSoup(open(keyfile,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b64decode(soup&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;find_all(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get_text())&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;parser&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argparse&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ArgumentParser()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;parser&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;add_argument(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;passname&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;parser&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;parse_args()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chdir(os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;dirname(os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;abspath(__file__)))&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;master_password&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;base64&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b64decode(b&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cGFzc3dvcmQ=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;Password is base64-obfuscated just in case someone accidentally&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    looks at the screen and memorizes it. Of course it is highly insecure&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    and you should only store it if you really have to. You can have the script&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    ask user for password every time even though in that case&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    the whole purpose of automating password management kinda defies itself.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/path/to/your/key&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;realkey&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# disable binary data extraction if&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(get_real_key(key))&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;# not needed&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pexpect&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;spawn(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;perl path/to/kpcli-3.1.pl &amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-kdb path/to/your/kdb(x) &amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-key realkey&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# omit if not needed&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;timeout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Please provide the master password: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendline(master_password)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;kpcli-3.1:/&amp;gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sendline(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;show kp/{}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;passname))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;kpcli-3.1:/&amp;gt; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(get_pass(child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;before),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;child&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;remove(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;realkey&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;main()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can get the workflow &lt;a href=&#34;https://dl.dropboxusercontent.com/u/24653887/keepass.alfredworkflow&#34;&gt;here&lt;/a&gt;. It doesn’t have an icon because fuck it. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Животные</title>
      <link>https://pecheny.me/dreams/animals/</link>
      <pubDate>Sat, 20 Aug 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/animals/</guid>
      <description>&lt;p&gt;В программу Олимпийских игр добавили новую дисциплину — доставление удовольствия животным. Участник соревнования должен был принести с собой животное. На него надевали энцефалограф, после чего участник мог делать с ним что угодно, лишь бы энцефалограф зарегистировал получение удовольствия. Чем больший кайф получает животное, тем лучше. Если спортсмен наносит животному травмы или просто делает больно или неприятно, он получает штраф или вообще снимается с соревнований. Спортивные аналитики и учёные заняты исследованием того, какие животные лучше подходят для этого вида спорта: у разных животных разный эмоциональный диапазон.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Правила игры «Хамовнический стрелок»</title>
      <link>https://pecheny.me/blog/rules-strelok/</link>
      <pubDate>Wed, 20 Jul 2016 23:22:00 +0300</pubDate>
      
      <guid>https://pecheny.me/blog/rules-strelok/</guid>
      <description>&lt;p&gt;В бое «Хамовнического стрелка» принимают участие две команды, в каждой не более шести игроков.
Игроки каждой команды до начала боя распределяют между собой номера от 1 до 6. Игрок с минимальным номером считается капитаном.&lt;/p&gt;

&lt;p&gt;Если в составе команды менее 6 игроков, то последние номера остаются незанятыми.&lt;/p&gt;

&lt;p&gt;Бой состоит из нескольких вопросов. Перед заданием вопроса объявляется его тема. Далее читается сам вопрос. Во время чтения вопроса нельзя обсуждать, но можно подавать знаки (например, сигнализировать о готовности дать ответ).
После окончания чтения вопроса у команд есть 10 секунд на обсуждение.&lt;/p&gt;

&lt;p&gt;С момента начала чтения вопроса до момента окончания времени обсуждения капитан в любой момент может нажать кнопку. Если при этом вопрос не был дочитан до конца, то он не дочитывается. После этого капитан называет номер и имя игрока своей команды, который будет отвечать.&lt;/p&gt;

&lt;p&gt;Перед ответом игрок может уточнить формулировку.
Если игрок даёт верный ответ, то игрок другой команды с таким же номером выбывает из игры (покидает своё место до конца боя), а если игрок с таким же номером уже выбыл, выбывает игрок с максимальным номером.&lt;/p&gt;

&lt;p&gt;Если игрок даёт неверный ответ или не даёт ответа, то он выбывает из игры.&lt;/p&gt;

&lt;p&gt;В случае неверного ответа команды могут обсуждать в течение 5 секунд. Если вопрос не был дочитан, то он дочитывается до конца.&lt;/p&gt;

&lt;p&gt;Если обе команды не дают правильного ответа на третий и более вопрос подряд, после оглашения правильного ответа из каждой команды выбывает игрок с максимальным номером.&lt;/p&gt;

&lt;p&gt;На каждый вопрос команда может отвечать любое количество раз.&lt;/p&gt;

&lt;p&gt;Команда одерживает победу в бое, если все игроки другой команды выбыли из игры.
Если последние игроки обеих команд выбыли из игры одновременно, побеждает команда, давшая больше правильных ответов. Если количество правильных ответов одинаково, побеждает команда, у которой меньше средний возраст. Если одинаков и этот показатель, победителя определяет подбрасывание монетки.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Правила командной «Своей игры»</title>
      <link>https://pecheny.me/blog/rules-teamsi/</link>
      <pubDate>Wed, 20 Jul 2016 23:21:00 +0300</pubDate>
      
      <guid>https://pecheny.me/blog/rules-teamsi/</guid>
      <description>&lt;p&gt;Игра проводится в письменной форме.&lt;/p&gt;

&lt;p&gt;Игра состоит из нескольких тем по 5 вопросов. Каждый вопрос имеет стоимость 10, 20, 30, 40 или 50 очков.&lt;/p&gt;

&lt;p&gt;Ведущий сообщает командам количество и названия тем перед началом соревнования, затем по очереди читает темы, объявляя стоимость вопросов.&lt;/p&gt;

&lt;p&gt;Команды сдают все ответы на одном бланке после того, как ведущий закончил читать вопросы. Затем ведущий объявляет правильные ответы.&lt;/p&gt;

&lt;p&gt;За правильный ответ команда получает количество очков, равное стоимости вопроса. За неправильный ответ команда теряет количество очков, равное стоимости вопроса. При отсутствии ответа на вопрос команда не получает и не теряет очков. Количество очков команды может быть отрицательным.&lt;/p&gt;

&lt;p&gt;Место команды определяется количеством набранных ей очков. Команда, набравшая большее количество очков, занимает более высокое место.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Бухарский квартал</title>
      <link>https://pecheny.me/dreams/bukhara/</link>
      <pubDate>Mon, 30 May 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/bukhara/</guid>
      <description>&lt;p&gt;В Москве есть тайный Бухарский квартал. Он находится в самом центре и довольно велик, но никто его не замечает благодаря искривлению пространства. Вход в квартал закрыт жестяным куполом с узорами, пройти через него может только человек с чистым сердцем.&lt;/p&gt;

&lt;p&gt;Внутри никто не живёт, только красивая архитектура в восточном духе. Рядом с ними несколько странно смотрятся скульптуры слонят работы Церетели. Они представляют собой небольшие подъёмные краны с ломаной стрелой, уходящей в землю. Собственно конец стрелы, касающийся земли, залит бетоном, а бетон сверху ещё укреплён стальными балками, чтобы плиту со стрелой было сложнее оторвать от земли. Всё потому, что под слонятами лежат считающиеся утраченными сокровища прошлых эпох — как советской, так и царской России.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ЧГК на воде</title>
      <link>https://pecheny.me/dreams/chgkwater/</link>
      <pubDate>Mon, 23 May 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/chgkwater/</guid>
      <description>&lt;p&gt;Малкин организовал чгк на воде. На команду выдают один большой спасательный круг, он выполняет роль стола ― игроки плавают, держась за него.&lt;/p&gt;

&lt;p&gt;В перерыве между турами устраивается deathmatch ― в воду сбрасывается несколько волейбольных мячей. Игроки должны хватать их и кидать в других, получая фраги. Предполагалось, что это будет интересно смотреть, но на деле вышла полная каша ― зрителю ничего было не понятно, вдобавок игровое поле слишком часто закрывал фонтан брызг.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The (Mis)adventures of a Music Geek on OS X</title>
      <link>https://pecheny.me/blog/osx-music/</link>
      <pubDate>Fri, 20 May 2016 20:02:00 +0300</pubDate>
      
      <guid>https://pecheny.me/blog/osx-music/</guid>
      <description>

&lt;p&gt;While OS X surely has its great qualities, a music geek hopping off Windows will find themself in a wasteland without Foobar and Mp3tag. I’ve tried practically all music players out there and decided to summarize my findings in case it would be useful for somebody.&lt;/p&gt;

&lt;p&gt;Let me note from the start that we’re talking real &lt;em&gt;geekery&lt;/em&gt;: hundreds of gigabytes of music on an external HDD, thoroughly tagged and organized by folder. For a casual user sticking with iTunes and/or cloud services would probably be the sanest choice.&lt;/p&gt;

&lt;p&gt;So, here ya go——&lt;/p&gt;

&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;My requirements/wishes for a music playing system are, in descending order, the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plays any format&lt;/li&gt;
&lt;li&gt;scrobbles&lt;/li&gt;
&lt;li&gt;has gapless playback (including mp3)&lt;/li&gt;
&lt;li&gt;has folder-based music library&lt;/li&gt;
&lt;li&gt;has music library&lt;/li&gt;
&lt;li&gt;edits tags&lt;/li&gt;
&lt;li&gt;converts files&lt;/li&gt;
&lt;li&gt;foobar-like playing queue&lt;/li&gt;
&lt;li&gt;playing queue&lt;/li&gt;
&lt;li&gt;multiple playlists&lt;/li&gt;
&lt;li&gt;waveform seekbar&lt;/li&gt;
&lt;li&gt;spectrum analyzer&lt;/li&gt;
&lt;li&gt;now playing notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, yes, I consider foobar2000 an ideal player—in fact, &lt;em&gt;the&lt;/em&gt; player. If you think otherwise this post is probably not for you.&lt;/p&gt;

&lt;h1 id=&#34;players&#34;&gt;Players&lt;/h1&gt;

&lt;p&gt;Tl;dr: I settled on mpd+ncmpcpp+puddletag+xACT+ffmpeg+sox. But for the curious:&lt;/p&gt;

&lt;h2 id=&#34;vox&#34;&gt;Vox&lt;/h2&gt;

&lt;p&gt;Widely advertised as the most popular alternative player for OS X, &lt;a href=&#34;http://coppertino.com/vox/mac&#34;&gt;Vox&lt;/a&gt; sports a great look, but I could hardly find anything worthy beyond that. It plays music, which is cool. I, however, couldn’t find a way to actually point it to a music library; I suspect that it feeds off iTunes’ library, but I don’t have one. And it keeps nagging the user with notifications prompting to try their paid streaming service.&lt;/p&gt;

&lt;p&gt;Bottom line: still useful for click’n’play type of situation where I won’t bother firing up mpd+ncmpcpp.&lt;/p&gt;

&lt;h2 id=&#34;sonora&#34;&gt;Sonora&lt;/h2&gt;

&lt;p&gt;I opened &lt;a href=&#34;https://github.com/sonoramac/Sonora&#34;&gt;the app&lt;/a&gt;, it crashed saying something something last.fm something. Didn’t bother to dig further.&lt;/p&gt;

&lt;h2 id=&#34;deadbeef&#34;&gt;DeaDBeeF&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://deadbeef.sourceforge.net/&#34;&gt;A very promising project&lt;/a&gt;, not in the least because it is closely modeled after foobar. The developer works on it in his spare time though, and progress is slow, if appealing. The latest and greatest features (e.g. folder browser, layout designer, waveform seekbar) are only in the Linux version, so Mac users should probably just wait patiently till the sun shines on their street. (Or &lt;a href=&#34;http://deadbeef.sourceforge.net/support.html&#34;&gt;encourage the developer financially&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&#34;foobar-through-wine&#34;&gt;Foobar through Wine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://hydrogenaud.io/index.php/topic,77261.125.html&#34;&gt;Scanning of folders on external NTFS HDDs fails miserably&lt;/a&gt;. Other than that, perfect. Still unusable if you don’t want to clutter the precious space on your Mac’s SSD with music.&lt;/p&gt;

&lt;h2 id=&#34;clementine&#34;&gt;Clementine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.clementine-player.org/&#34;&gt;The project&lt;/a&gt; hasn’t been updated in a long time and has an ugly look and feel; its moodboard is a meek parody of a waveform seekbar. If you’re not into ncurses though, it could very well be your player of choice — it plays music, scrobbles, and has a library. It isn’t very low on resources as well, so you could consider using something more lightweight when not plugged in.&lt;/p&gt;

&lt;h2 id=&#34;cog&#34;&gt;Cog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://cogx.org/&#34;&gt;Cog&lt;/a&gt; is probably the best choice for the not-so-geeky geeks who, like me, are fond of folder-based music organization. (I used it until i switched to cmus and then to mpd+ncmpcpp.) Be sure to select the beta channel in the settings to use the 2013 fork instead of the abandoned 2009 version. Cog’s looks are minimalistic, yet pretty. It plays music, scrobbles, has notifications. What’s else to be desired? Gapless playback is promised but not working. And given that the 2013 fork is abandoned as well, it is unlikely to get better in the near future.&lt;/p&gt;

&lt;h2 id=&#34;martin&#34;&gt;Martin&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tgrbin.github.io/Martin/&#34;&gt;Martin&lt;/a&gt; is a small, but great and very promising project. It is also inspired by foobar, and has practically all the greatest features in my list: plays everything, scrobbles, has &lt;em&gt;blazingly fast&lt;/em&gt; folder-based library, dynamic playlist and sane queue management. Unfortunately, no gapless playback (although it &lt;a href=&#34;https://github.com/tgrbin/Martin/issues/11&#34;&gt;may happen in the future&lt;/a&gt;), so I don’t use it on a daily basis. Also, nobody knows what obscure bugs you can run into, because it is probably used by a dozen people on Earth.&lt;/p&gt;

&lt;h2 id=&#34;cmus&#34;&gt;cmus&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://cmus.github.io/&#34;&gt;Minimalism is good&lt;/a&gt;, the library is tolerable, live-filter is awesome (albeit slow). Not everything is so great though: gapless playback has frequent hiccups which makes listening not always a pleasant experience; you need to build it yourself to enable coreaudio and ffmpeg output which may be difficult for casual users; the documentation is sparse.&lt;/p&gt;

&lt;h2 id=&#34;mpd-ncmpcpp-mpdas&#34;&gt;mpd+ncmpcpp (+mpdas)&lt;/h2&gt;

&lt;p&gt;This is what at the moment ended up as my player of choice. It requires a good amount of sadomasochism to deal with, though. While the installation is as simple as &lt;code&gt;brew install mpd &amp;amp;&amp;amp; brew install ncmpcpp&lt;/code&gt;, you have to &lt;em&gt;create config files by hand&lt;/em&gt; to make this even run. &lt;code&gt;brew install mpdas&lt;/code&gt; and &lt;em&gt;another config file&lt;/em&gt; to make scrobbling work. A couple of hours for it to scan your massive library (scanning is much slower that e.g. Martin’s). What you get in exchange for the pain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a cute ncurses-based UI&lt;/li&gt;
&lt;li&gt;a library with fast search&lt;/li&gt;
&lt;li&gt;gapless playback working perfectly&lt;/li&gt;
&lt;li&gt;no queue :(&lt;/li&gt;
&lt;li&gt;scrobbling&lt;/li&gt;
&lt;li&gt;a search engine&lt;/li&gt;
&lt;li&gt;a tag editor (though the library doesn’t update after every edit; sometimes you have to restart the update process manually)&lt;/li&gt;
&lt;li&gt;an ascii visualizer! (though enabling it makes everything laggy)&lt;/li&gt;
&lt;li&gt;practically &lt;em&gt;no documentation&lt;/em&gt; (yay! the joys of exploring!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not very much, in fact (for me it was gapless which nailed it). For those who are eager to try but reluctant to deal with the hassle I’ll post my config files.&lt;/p&gt;

&lt;p&gt;~/.mpd/mpd.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;music_directory         &amp;quot;/Volumes/My Passport/music&amp;quot;
playlist_directory      &amp;quot;~/.mpd/playlists&amp;quot;
db_file                 &amp;quot;~/.mpd/mpd.db&amp;quot;
log_file                &amp;quot;~/.mpd/mpd.log&amp;quot;
pid_file                &amp;quot;~/.mpd/mpd.pid&amp;quot;
state_file              &amp;quot;~/.mpd/mpdstate&amp;quot;
auto_update             &amp;quot;yes&amp;quot;
auto_update_depth       &amp;quot;5&amp;quot;
follow_outside_symlinks &amp;quot;yes&amp;quot;
follow_inside_symlinks  &amp;quot;yes&amp;quot;
bind_to_address         &amp;quot;/users/pecheny/.mpd/socket&amp;quot;

audio_output {
  type                  &amp;quot;osx&amp;quot;
  name                  &amp;quot;CoreAudio&amp;quot;
  mixer_type            &amp;quot;software&amp;quot;
}

decoder {
  plugin                &amp;quot;mp4ff&amp;quot;
  enabled               &amp;quot;no&amp;quot;
}

bind_to_address         &amp;quot;127.0.0.1&amp;quot;
port                    &amp;quot;6600&amp;quot;

user                    &amp;quot;pecheny&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~/.ncmpcpp/config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mpd_music_dir = &amp;quot;/Volumes/My Passport/music&amp;quot;
playlist_display_mode = &amp;quot;columns&amp;quot;
user_interface = &amp;quot;alternative&amp;quot;
allow_for_physical_item_deletion = &amp;quot;no&amp;quot;
display_bitrate = &amp;quot;yes&amp;quot;
show_hidden_files_in_local_browser = &amp;quot;yes&amp;quot;
playlist_separate_albums = &amp;quot;yes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://timothy.sh/article/install-mpd-ncmpcpp-on-osx-yosemite&#34;&gt;This post&lt;/a&gt; has more in-depth description of the installation and running process. Also, &lt;a href=&#34;http://pkgbuild.com/~jelle/ncmpcpp/&#34;&gt;this cheat sheet&lt;/a&gt; is indispensable.&lt;/p&gt;

&lt;h1 id=&#34;taggers&#34;&gt;Taggers&lt;/h1&gt;

&lt;h2 id=&#34;mp3tag-through-wine&#34;&gt;Mp3tag through Wine&lt;/h2&gt;

&lt;p&gt;The author of (the awesome) Mp3tag was kind enough to provide &lt;a href=&#34;http://www.mp3tag.de/en/mac-osx.html&#34;&gt;Wine builds&lt;/a&gt; on his page. It works just like on Windows, except it doesn’t have native OS integration, and that’s why I use it only for something complex which puddletag won’t handle&lt;/p&gt;

&lt;h2 id=&#34;puddletag&#34;&gt;puddletag&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.puddletag.net/&#34;&gt;puddletag&lt;/a&gt; is my go-to tagger now; you are one &lt;code&gt;brew install puddletag &amp;amp;&amp;amp; puddletag&lt;/code&gt; away from tagging your files. The UI is a bit confusing though; for example, it took me long to figure out how to fetch tags from Musicbrainz (it’s &lt;em&gt;Window → Tag sources&lt;/em&gt;, by the way.) The table layout is awesome, and, even if a bit laggy and unstable, it is enjoyable to work with.&lt;/p&gt;

&lt;h1 id=&#34;converters&#34;&gt;Converters&lt;/h1&gt;

&lt;p&gt;Things are sad in this realm of OS X; nothing remotely as comfortable as Foobar is to be seen. I mostly use &lt;a href=&#34;http://sox.sourceforge.net/&#34;&gt;sox&lt;/a&gt; or &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;ffmpeg&lt;/a&gt; in the terminal, which isn’t exactly user-friendly or convenient. &lt;a href=&#34;http://sbooth.org/Max/&#34;&gt;Max&lt;/a&gt; is tolerable. &lt;a href=&#34;http://xact.scottcbrown.org/&#34;&gt;xACT&lt;/a&gt; is useful for splitting large files by cuesheet. Alas, nothing more to be said here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Подготовка раздаток в Inkscape</title>
      <link>https://pecheny.me/blog/handouts-inkscape/</link>
      <pubDate>Fri, 20 May 2016 18:26:00 +0300</pubDate>
      
      <guid>https://pecheny.me/blog/handouts-inkscape/</guid>
      <description>&lt;p&gt;Хороший тон для редактора — стараться облегчить организатору турнира его нелёгкий труд. Одно из мест, где это без особых усилий можно сделать — печать раздаток. Сегодня я расскажу, как передать в распоряжение организатора не голую картинку, а пдфку формата A4 с размноженной на энное количество команд картинкой.&lt;/p&gt;

&lt;p&gt;Для этого мы воспользуемся свободной и бесплатной программой &lt;a href=&#34;https://inkscape.org/en/&#34;&gt;Inkscape&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Под Windows и Linux установка тривиальна, пользователям Мака придётся поставить XQuartz, но я рассчитываю, что вы справитесь.&lt;/p&gt;

&lt;p&gt;Итак, пусть у нас есть картинка, которую мы хотим раздать — вот она:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.thatericalper.com/wp-content/uploads/2014/07/rick-astley.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Запускаем Inkscape, перед нами пустой лист A4. Заходим в меню &lt;em&gt;File&lt;/em&gt;, кликаем &lt;em&gt;Import&lt;/em&gt;, загружаем картинку.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/uegQD4C.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Прикиньте, какого минимального размера должна быть раздатка, чтобы нужные вам детали было видно. Для этого полезно воспользоваться меню &lt;em&gt;View → Zoom → 1:1&lt;/em&gt; и приложить к экрану настоящий лист A4 — через него будет просвечивать ваша раздатка. Включите инструмент «Стрелка», если ещё не, кликните по картинке, зажмите &lt;em&gt;Ctrl&lt;/em&gt; (чтобы уменьшение сохраняло масштаб) и уменьшите её до нужного размера.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/QtZt1EM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь выберите пункт меню &lt;em&gt;Edit → Clone → Create Tiled Clones&lt;/em&gt; и выберите справа вкладку &lt;em&gt;Shift&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://imgur.com/9qggoQU&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Чтобы получилась ровная сетка, у вас должны быть нулевыми значения &lt;em&gt;Shift X per row&lt;/em&gt; и &lt;em&gt;Shift Y per column&lt;/em&gt;, и ненулевыми, соответственно, значения &lt;em&gt;Shift Y per row&lt;/em&gt; и &lt;em&gt;Shift X per column&lt;/em&gt;. Подберите подходящие значения этих параметров так, чтобы организатору было удобно резать, и выберите нужное количество столбцов и строк (&lt;em&gt;Rows, columns&lt;/em&gt;), чтобы заполнить лист. У вас получится что-то в этом роде:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/YduGH4H.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Теперь осталось только удалить изначальную картинку (она при клонировании остаётся на месте, и получается две картинки одна над другой) и сохранить как пдф (&lt;em&gt;File → Save As&amp;hellip; → PDF&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Полезно сохранить файл под таким именем, чтобы понятно было, на сколько команд рассчитан этот лист. Для этого нужно перемножить ваши строки и столбцы и разделить на три. В моём случае выходит шесть, называем файл &lt;code&gt;rickastley_6teams.pdf&lt;/code&gt; и сохраняем. Готово, вы восхитительны!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Вообще говоря, это наверняка можно с приемлемым качеством делать автоматически, но я пока с этой задачей не справился — буду держать в курсе.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solution for ‘disappearing folder’ problem in OSXFUSE&#43;SSHFS</title>
      <link>https://pecheny.me/blog/osxfuse-sshfs/</link>
      <pubDate>Tue, 22 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pecheny.me/blog/osxfuse-sshfs/</guid>
      <description>&lt;p&gt;So as you may know, &lt;a href=&#34;https://osxfuse.github.io/&#34;&gt;OSXFUSE&lt;/a&gt;+&lt;a href=&#34;https://github.com/osxfuse/osxfuse/wiki/SSHFS&#34;&gt;SSHFS&lt;/a&gt; is a wonderful option for accessing remote servers via sftp in a convenient fashion. I’ve been using it with great pleasure to remotely edit Python scripts in Sublime Text, until the Disappearing Folder Problem came haunting over me.&lt;/p&gt;

&lt;p&gt;I’ve found traces of it mentioned &lt;a href=&#34;http://superuser.com/questions/772405/why-does-directory-vanish-when-i-do-sshfs-how-to-setup-sshfs-share-on-max-osx-1&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/osxfuse/osxfuse/issues/174&#34;&gt;there&lt;/a&gt;, but there were either no solutions or incorrect ones. So I decided to post the one which worked for me.&lt;/p&gt;

&lt;p&gt;Essence of the problem: you mount a remote server onto a folder, you can access it perfectly from terminal or e.g. &lt;a href=&#34;http://doublecmd.sourceforge.net/&#34;&gt;Double Commander&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but the mountpoint folder disappears from Finder or any apps reliant on native file handling capabilities, including the aforementioned Sublime Text.&lt;/p&gt;

&lt;center&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/2985831/5575697/aa6efe5e-8faa-11e4-9214-f7259d30b531.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;

&lt;p&gt;@synec proposes &lt;code&gt;-o local&lt;/code&gt;, but for me it was &lt;code&gt;-o volname=folder&lt;/code&gt; which did the trick: &lt;code&gt;sshfs x.y.z.net: folder&lt;/code&gt; didn’t work, while &lt;code&gt;sshfs -o volname=folder x.y.z.net: folder&lt;/code&gt; did. Finder now sees the folder, and the icon is changed: instead of the regular folder it now shows the same icon as of an external hard disk.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;By the way, this is the best orthodox file manager for OS X I’ve found so far (though I didn’t test paid ones who don’t provide a free trial). Even if its interface is neither beautiful nor native, it does the job. The feature set of Commander One is too small, and muCommander didn’t even run.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Дьявол</title>
      <link>https://pecheny.me/dreams/devil/</link>
      <pubDate>Mon, 21 Mar 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/devil/</guid>
      <description>&lt;p&gt;Гитарист малоизвестной группы заключает договор с дьяволом, чтобы группа была более успешной. Так и происходит, и чувак с ужасом ждёт, когда и какая последует расплата. В один прекрасный день он встречает красивую брюнетку, влюбляется в неё, чувства вроде бы взаимны, они оказываются наедине, раздеваются, и чувак обнаруживает, что его хуй превратился в пизду, а у девушки как раз хуй. Ну что поделать; они трахаются, а потом девушка (это был дьявол, конечно) превращается в бородатого хипстера, пьёт с ним пиво и говорит за жизнь. Но у чувака так и остаётся пизда.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Мозг</title>
      <link>https://pecheny.me/dreams/brain/</link>
      <pubDate>Fri, 18 Mar 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/brain/</guid>
      <description>&lt;p&gt;Мне подарили торт в белой глазури. Торт был в форме гроба, а в самом центре ― в форме мозга (как будто в центр гроба врезали мозг). Я его разрезал, но там вместо сладкого оказалось мясо с кровью. Ну ладно, ем мясо с кровью, вкусно даже. Дошёл до мозга, ем его и вдруг понимаю, что это мой собственный мозг ― он переместился в торт, и теперь я думаю из торта.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Гуф</title>
      <link>https://pecheny.me/dreams/guf/</link>
      <pubDate>Thu, 03 Mar 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/guf/</guid>
      <description>&lt;p&gt;Гуф открыл сеть магазинов «Федерация легального гровинга», где продавались рассады, земля, удобрения, лампы etc. На сайте магазинов утверждалось, что хотя употребление марихуаны в России запрещено, выращивание разрешено. На сайте публиковались советы по уходу за растущей травой, а один из разделов даже назывался «Как правильно курить». У сайта был табличный дизайн из девяностых и картинки вместо &lt;code&gt;@font-face&lt;/code&gt;, но Гуфа это не смущало: в интервью он заявил, что мода там, где он, и скоро все так будут делать.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Шабад</title>
      <link>https://pecheny.me/dreams/shabad/</link>
      <pubDate>Wed, 02 Mar 2016 10:00:00 +0300</pubDate>
      
      <guid>https://pecheny.me/dreams/shabad/</guid>
      <description>&lt;p&gt;Пошли толпой в гости к Оле Шабад. Туда пришёл В. и сказал, что квартира ему не очень нравится, тут же вызвал рабочих, которые в гостиной поставили мраморную ванну. «Вот теперь заебись» ― сказал он. Оля в это время делала блины и разглаживала их утюгом, гордясь тем, какие они получаются тонкие.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>